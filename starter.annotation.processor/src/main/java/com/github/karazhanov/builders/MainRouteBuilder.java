package com.github.karazhanov.builders;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import com.sun.tools.javac.tree.JCTree;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toSet;

/**
 * @author karazhanov on 27.10.17.
 */
public class MainRouteBuilder {

    private final Messager messager;
    private final Filer filer;
    private List<ComponentBuilder> components;

    public MainRouteBuilder(ProcessingEnvironment processingEnv) {
        messager = processingEnv.getMessager();
        filer = processingEnv.getFiler();
        components = new ArrayList<>();
    }

    public void addRoute(ComponentBuilder componentBuilder) {
        components.add(componentBuilder);
    }

    public void build() {
        components.forEach(componentBuilder -> {
            try {
                saveFile(componentBuilder);
            } catch (Exception e) {
                messager.printMessage(Diagnostic.Kind.NOTE, e.getMessage());
            }
        });
    }

    private void saveFile(ComponentBuilder componentBuilder) {
        TypeSpec typeSpec = componentBuilder.build();
        String packageName = componentBuilder.getPackageName();
        JavaFile javaFile = JavaFile
                .builder(packageName, typeSpec)
                .indent("\t")
                .skipJavaLangImports(true)
                .addFileComment("Generated by KARAZHANOV spring boot processor, do not modify")
                .build();

        String[] rawSourceLines = javaFile.toString().split("\n", -1);
        Set<String> imports = getImports(rawSourceLines, componentBuilder.getImports());
        writeJavaFile(rawSourceLines, typeSpec, packageName, imports);
    }

    private void writeJavaFile(String[] rawSource, TypeSpec typeSpec, String packageName, Set<String> imports) {
        Writer writer = null;
        try {
            String fileName = packageName.isEmpty()
                    ? typeSpec.name
                    : packageName + "." + typeSpec.name;
            JavaFileObject jfo = filer.createSourceFile(fileName);
            writer = jfo.openWriter();
            int sourceStartLine = foundStartSource(rawSource);
            writePackage(writer, rawSource);
            writeImports(writer, imports);
            writeSource(writer, rawSource, sourceStartLine);
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException ignore) {
                }
            }
        }
    }

    private void writePackage(Writer writer, String[] rawSource) throws IOException {
        for (String s : rawSource) {
            writer.append(s).append("\n");
            if (s.startsWith("package")) {
                writer.append("\n");
                return;
            }
        }
    }

    private void writeImports(Writer writer, Set<String> imports) throws IOException {
        for (String anImport : imports) {
            writer.append(anImport).append("\n");
        }
        writer.append("\n");
    }

    private void writeSource(Writer writer, String[] rawSource, int sourceStartLine) throws IOException {
        for (int i = sourceStartLine; i < rawSource.length; i++) {
            writer.append(rawSource[i]).append("\n");
        }
    }

    private int foundStartSource(String[] rawSource) {
        int lineNumber = 0;
        boolean packageFound = false;
        boolean importFound = false;
        for (String s : rawSource) {
            String line = s.trim();
            lineNumber++;
            if (line.startsWith("package")) {
                packageFound = true;
                continue;
            }
            if (line.startsWith("import")) {
                importFound = true;
                continue;
            }
            if (packageFound && importFound) {
                break;
            }
        }
        return lineNumber;
    }

    private Set<String> getImports(String[] rawSource, com.sun.tools.javac.util.List<JCTree.JCImport> imports) {
        return Stream
                .concat(
                        Arrays.stream(rawSource)
                                .filter(s -> s.trim().startsWith("import")),
                        imports.stream()
                                .map(JCTree::toString))
                .map(s -> s.replace("\n", ""))
                .collect(toSet());
    }

}
